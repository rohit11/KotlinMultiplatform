name: Auto Assign Milestone to PRs

on:
  pull_request:
    types: [opened, closed]

jobs:
  assign-milestone:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.base.ref == 'main' ||
      startsWith(github.event.pull_request.base.ref, 'release/')

    steps:
      - name: 🔍 Debug Event Context
        run: |
          echo "Event Action: ${{ github.event.action }}"
          echo "Base Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Merged: ${{ github.event.pull_request.merged }}"

      - name: Determine milestone strategy and context
        id: context
        run: |
          PR_BRANCH="${{ github.event.pull_request.base.ref }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

          if [[ "$PR_BRANCH" == "main" ]]; then
            echo "strategy=date" >> $GITHUB_OUTPUT

            if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
              echo "ref_date=${{ github.event.pull_request.merged_at }}" >> $GITHUB_OUTPUT
            else
              echo "ref_date=${{ github.event.pull_request.created_at }}" >> $GITHUB_OUTPUT
            fi
          else
            milestone_name="${PR_BRANCH#release/}"
            echo "strategy=name" >> $GITHUB_OUTPUT
            echo "milestone_name=$milestone_name" >> $GITHUB_OUTPUT
          fi

      - name: Find or Create Matching Milestone
        id: milestone
        run: |
          TOKEN=${{ secrets.GITHUB_TOKEN }}
          STRATEGY="${{ steps.context.outputs.strategy }}"
          REF_DATE="${{ steps.context.outputs.ref_date }}"
          MILESTONE_NAME="${{ steps.context.outputs.milestone_name }}"

          milestones=$(curl -s -H "Authorization: Bearer $TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/milestones?state=open)

          if [[ "$STRATEGY" == "date" ]]; then
            milestone_id=$(echo "$milestones" | jq -r --arg date "$REF_DATE" '
              [ .[] | select(.due_on != null and (.due_on >= $date)) ]
              | sort_by(.due_on)
              | .[0].number // empty
            ')
            milestone_name=$(echo "$milestones" | jq -r --arg date "$REF_DATE" '
              [ .[] | select(.due_on != null and (.due_on >= $date)) ]
              | sort_by(.due_on)
              | .[0].title // empty
            ')

            if [ -z "$milestone_id" ]; then
              echo "⚠️ No matching milestone for 'main'. Skipping assignment."
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            milestone_id=$(echo "$milestones" | jq -r --arg name "$MILESTONE_NAME" '
              .[] | select(.title == $name) | .number // empty
            ')
            if [ -z "$milestone_id" ]; then
              echo "⚠️ Milestone '$MILESTONE_NAME' not found. Creating it..."
              due_date=$(date -u -d "+7 days" '+%Y-%m-%dT00:00:00Z')
              response=$(curl -s -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/repos/${{ github.repository }}/milestones \
                -d "{\"title\":\"$MILESTONE_NAME\",\"state\":\"open\",\"due_on\":\"$due_date\"}")
              milestone_id=$(echo "$response" | jq -r '.number')
              echo "✅ Created milestone $MILESTONE_NAME with ID $milestone_id"
            else
              echo "✅ Found existing milestone $MILESTONE_NAME with ID $milestone_id"
            fi
          fi

          echo "milestone_id=$milestone_id" >> $GITHUB_OUTPUT
          echo "milestone_name=$milestone_name" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Assign milestone to PR
        if: steps.milestone.outputs.skip != 'true' && steps.milestone.outputs.milestone_id != ''
        run: |
          PR_NUMBER=${{ steps.context.outputs.pr_number }}
          MILESTONE_ID=${{ steps.milestone.outputs.milestone_id }}
          TOKEN=${{ secrets.GITHUB_TOKEN }}

          curl -s -X PATCH \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER \
            -d "{\"milestone\": $MILESTONE_ID}"

          echo "✅ Assigned milestone '${{ steps.milestone.outputs.milestone_name }}' to PR #$PR_NUMBER"
