name: Auto Assign or Migrate Milestone

on:
  pull_request:
    types: [opened, closed]
  push:
    branches:
      - 'release/**'

jobs:
  assign-or-migrate-milestone:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.base.ref == 'main' ||
      startsWith(github.event.pull_request.base.ref, 'release/')

    steps:
      - name: Debug Event Context
        run: |
          echo "Action: ${{ github.event.action }}"
          echo "Base: ${{ github.event.pull_request.base.ref }}"
          echo "Merged: ${{ github.event.pull_request.merged }}"

      - name: Determine milestone strategy
        id: context
        run: |
          branch="${{ github.event.pull_request.base.ref }}"
          pr_number="${{ github.event.pull_request.number }}"
          echo "pr_number=$pr_number" >> $GITHUB_OUTPUT

          if [[ "$branch" == "main" ]]; then
            echo "strategy=date" >> $GITHUB_OUTPUT
            if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
              echo "ref_date=${{ github.event.pull_request.merged_at }}" >> $GITHUB_OUTPUT
            else
              echo "ref_date=${{ github.event.pull_request.created_at }}" >> $GITHUB_OUTPUT
            fi
          else
            milestone_name="${branch#release/}"
            echo "strategy=name" >> $GITHUB_OUTPUT
            echo "milestone_name=$milestone_name" >> $GITHUB_OUTPUT

      - name: Get or Create Milestone
        id: milestone
        run: |
          STRATEGY="${{ steps.context.outputs.strategy }}"
          REF_DATE="${{ steps.context.outputs.ref_date }}"
          MILESTONE_NAME="${{ steps.context.outputs.milestone_name }}"
          TOKEN=${{ secrets.GITHUB_TOKEN }}

          milestones=$(curl -s -H "Authorization: Bearer $TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/milestones?state=open)

          if [[ "$STRATEGY" == "date" ]]; then
            milestone_id=$(echo "$milestones" | jq -r --arg date "$REF_DATE" '
              [ .[] | select(.due_on != null and (.due_on >= $date)) ]
              | sort_by(.due_on)
              | .[0].number // empty
            ')
            milestone_name=$(echo "$milestones" | jq -r --arg date "$REF_DATE" '
              [ .[] | select(.due_on != null and (.due_on >= $date)) ]
              | sort_by(.due_on)
              | .[0].title // empty
            ')
            if [ -z "$milestone_id" ]; then
              milestone_name="temp-unreleased"
              milestone_id=$(echo "$milestones" | jq -r '.[] | select(.title == "temp-unreleased") | .number // empty')
              if [ -z "$milestone_id" ]; then
                echo "ðŸ›  Creating fallback milestone 'temp-unreleased'"
                due_date=$(date -u -d "+7 days" '+%Y-%m-%dT00:00:00Z')
                response=$(curl -s -X POST \
                  -H "Authorization: Bearer $TOKEN" \
                  -H "Accept: application/vnd.github+json" \
                  https://api.github.com/repos/${{ github.repository }}/milestones \
                  -d "$(printf '{"title": "%s", "state": "open", "due_on": "%s"}' "temp-unreleased" "$due_date")")
                milestone_id=$(echo "$response" | jq -r '.number')
              fi
            fi
          else
            milestone_id=$(echo "$milestones" | jq -r --arg name "$MILESTONE_NAME" '
              .[] | select(.title == $name) | .number // empty
            ')
            if [ -z "$milestone_id" ]; then
              if [[ "$MILESTONE_NAME" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                due_date="${MILESTONE_NAME}T00:00:00Z"
              else
                due_date=$(date -u -d "+7 days" '+%Y-%m-%dT00:00:00Z')
              fi

              echo "ðŸ›  Creating milestone $MILESTONE_NAME"
              response=$(curl -s -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/repos/${{ github.repository }}/milestones \
                -d "$(printf '{"title": "%s", "state": "open", "due_on": "%s"}' "$MILESTONE_NAME" "$due_date")")
              milestone_id=$(echo "$response" | jq -r '.number')
            fi

            temp_id=$(echo "$milestones" | jq -r '.[] | select(.title == "temp-unreleased") | .number // empty')
            if [ -n "$temp_id" ]; then
              prs=$(curl -s -H "Authorization: Bearer $TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/issues?milestone=$temp_id&state=all")

              echo "$prs" | jq -c '.[]' | while read pr; do
                pr_number=$(echo "$pr" | jq -r '.number')
                pr_date=$(echo "$pr" | jq -r '.pull_request.merged_at // .created_at')
                if [[ "$pr_date" < "$due_date" ]]; then
                  echo "â†ª Reassigning PR #$pr_number to milestone $MILESTONE_NAME"
                  curl -s -X PATCH \
                    -H "Authorization: Bearer $TOKEN" \
                    -H "Accept: application/vnd.github+json" \
                    https://api.github.com/repos/${{ github.repository }}/issues/$pr_number \
                    -d "$(printf '{"milestone": %s}' "$milestone_id")"
                fi
              done

              remaining=$(curl -s -H "Authorization: Bearer $TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/issues?milestone=$temp_id&state=all" | jq 'length')
              if [ "$remaining" -eq 0 ]; then
                curl -s -X PATCH \
                  -H "Authorization: Bearer $TOKEN" \
                  -H "Accept: application/vnd.github+json" \
                  https://api.github.com/repos/${{ github.repository }}/milestones/$temp_id \
                  -d '{"state": "closed"}'
                echo "ðŸ§¹ Closed empty temp-unreleased milestone"
              fi
            fi
          fi

          echo "milestone_id=$milestone_id" >> $GITHUB_OUTPUT
          echo "milestone_name=$milestone_name" >> $GITHUB_OUTPUT

      - name: Assign Milestone to PR
        if: steps.milestone.outputs.milestone_id != ''
        run: |
          PR_NUMBER=${{ steps.context.outputs.pr_number }}
          MILESTONE_ID=${{ steps.milestone.outputs.milestone_id }}
          TOKEN=${{ secrets.GITHUB_TOKEN }}

          curl -s -X PATCH \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER \
            -d "$(printf '{"milestone": %s}' "$MILESTONE_ID")"

          echo "âœ… Assigned milestone '${{ steps.milestone.outputs.milestone_name }}' to PR #$PR_NUMBER"
